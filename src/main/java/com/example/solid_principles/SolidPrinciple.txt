The SOLID principles are a set of five design principles in object-oriented programming intended to make software designs more understandable, flexible, and maintainable. These principles, introduced by Robert C. Martin, aim to reduce coupling and increase cohesion in your code. The acronym SOLID stands for:
Single Responsibility Principle
Open/Closed Principle
Liskov Substitution Principle
Interface Segregation Principle
Dependency Inversion Principle

1. Single Responsibility Principle (SRP)
A class should have only one reason to change.
This principle suggests that a class should have a single, well-defined responsibility. If a class has multiple responsibilities, changes to one responsibility could affect others, leading to unexpected side effects and making the class harder to maintain and test

2.  Open/Closed Principle (OCP)
Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.
This principle means you should be able to add new functionality to a class without altering its existing code. This is typically achieved through abstraction (interfaces or abstract classes) and polymorphism

3. Liskov Substitution Principle (LSP)
Subclasses must be substitutable for their base classes without altering the behavior of the program.
This principle states that if a class S is a subtype of a class T, then objects of type T may be replaced with objects of type S without any unexpected behavior. In simpler terms, a subclass should be able to do everything its parent class can do.

4. Interface Segregation Principle (ISP)
Clients should not be forced to depend upon interfaces that they do not use.
This principle suggests that it's better to have multiple smaller, client-specific interfaces than one large, general-purpose interface. This prevents classes from being forced to implement methods they don't need.
