The SOLID principles are a set of five design principles in object-oriented programming intended to make software designs more understandable, flexible, and maintainable. These principles, introduced by Robert C. Martin, aim to reduce coupling and increase cohesion in your code. The acronym SOLID stands for:
Single Responsibility Principle
Open/Closed Principle
Liskov Substitution Principle
Interface Segregation Principle
Dependency Inversion Principle

1. Single Responsibility Principle (SRP)
A class should have only one reason to change.
This principle suggests that a class should have a single, well-defined responsibility. If a class has multiple responsibilities, changes to one responsibility could affect others, leading to unexpected side effects and making the class harder to maintain and test
